***ANSWER ALL QUESTIONS BELOW***

Why do we need data structure?
Answer:  Data Structures are the main part of many computer science algorithms as they enable the programmers
to handle the data in an efficient way. It plays a vital role in enhancing the performance of a software or a
program as the main function of the software is to store and retrieve the user's data as fast as possible.

What are the various operations that can be performed on different data structures?
Answer: Insertion: Insertion means inserting any element in the data structure.
        Deletion: Deletion means deleting an element from the data structure.
        Searching: Searching means finding a particular element from the data structure.
        Sorting: Sorting means organizing the elements in data structure in Ascending or descending order.
        Traversing: Traversing means visiting each component in the data structure.


When would we use data structures in the real world?
Answer: To implement back functionality in the internet browser.
To store the possible moves in a chess game. To store a set of ﬁxed keywords which are referenced very frequently.
To store the customer order information in a drive-in burger place. So on and so forth.

What is an Array?
Answer:  An array is a data structure that contains a group of elements. Typically these elements are all of the
 same data type such as string or integer. They are commonly used in computer programs to organize data.

What is the difference between Array and ArrayList?
Answer:  An array is basic functionality provided by Java. ArrayList is part of the collection framework in Java.
Therefore array members are accessed using [], while ArrayList has a set of methods to access elements and modify them.
Array: Simple fixed sized arrays that are created in Java
ArrayList : Dynamic sized arrays in Java that implement List interface.

What is a LinkedList?
Answer: Linked List is a part of the Collection framework present in the java.util package.
This class is an implementation of the LinkedList data structure which is a linear data structure where the
elements are not stored in contiguous locations and every element is a separate object with a data part and
 address part. The elements are linked using pointers and addresses. Each element is known as a node.
  Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays. It also has
  few disadvantages, such as that the nodes cannot be accessed directly, instead one must start from the head
   and follow through the link to reach the node they wish to access.

How is an Array different from LinkedList?
Answer: Array is basically a collection of elements of similar data type, but LinkedList is a collection of objects
which is known as a node. In Linked list nodes consist of two parts: data and address. Array elements are stored in
 contiguous memory, but the elements of LinkedList  can be stored anywhere in the memory.


What is a Queue?
Answer: The Queue interface present in the java.util package and extends the Collection interface is used to hold
the elements about to be processed in First In First Out (FIFO) order. It is an ordered list of objects with its use
limited to insert elements at the end of the list and deleting elements from the start of the list. The Queue interface
 is declared as: public interface Queue extends Collection


What is a Stack (not Java memory - refers to data structure)?
Answer:  Stack is a linear data structure which follows a particular order in which operations are performed.
Order is usually Last in First Out (LIFO) or First in First Out (FIFO). Stack is an ordered collection of
items where the addition of new items and removal of existing teims always take place at the same end.
The end is referred to the top and the end is the base. Stacks are used to implement functions, parsers,
 expression evaluation and backtracking algorithms.

What is FIFO and LIFO?
Answer: FIFO is an abbreviation for first in, first out. It is a method for handling data structures where
 the first element is processed first and the newest element is processed last.
        LIFO is an abbreviation for Last in, first out and is same as first in, last out (FILO). It is a method
         for handling data structures where the last element is processed first and the first element is processed last.
        First in First Out (FIFO) approach is used as an operating system algorithm, which gives every process
        CPU time in the order they arrive. The data structure that implements First in First Out (FIFO) is Queue.
        Last in First Out (LIFO) approach is used as a queuing theory that refers to the way items are stored in
         types of data structures. The data structure that implements Last in First Out (LIFO) is Stack.


Explain Big O Notation?
Answer: Big O Notation describes the time or space required for the execution in a software program. Big O is also
 used to classify algorithms according to their run time or space requirements as the input size grows. It is a set
 of all algorithms that run no worse than a certain speed. Big O notation characterizes functions according to their
  growth rates: different functions with the same growth rate may be represented using the same O notation.
   The letter O is used because the growth rate of a function is also referred to as the order of the function


What is the best case to search an element from an array?
Answer: It is best to search for an element if the array is sorted.
For an unsorted array however, the best case is O(1) when the element is in first or last

What is the worst case to search an element from an array?
Answer: The worst case complexity is O(n/2) (equivalent to O(n)) when the element
 in the array is in the middle or not present in the array.


Describe what a tree data structure is?
Answer: A tree is a nonlinear data structure, compared to arrays, linked lists, stacks and queues which are
 linear data structures. A tree can be empty with no nodes or a structure consisting of one node called the
 root and zero or one or more subtrees.


Describe what a graph data structure is?
Answer:  A graph is a non-linear (data elements are attached in hierarchically) data structure consisting of nodes
and edges. The nodes are referred to as vertices, and lines or arcs that connect any two nodes are called edges in the
 graph. Graph data structure consists of a finite set of vertices (or nodes) and a set of edges which connect a
  pair of nodes.

What is the difference between the HashTable and HashMap?
Answer:  HashMap is non-synchronized. It is not thread-safe and can't be shared between many threads without proper
synchronization code. HashTable is synchronized and is thread-safe and can be shared with many threads.
HashTables does not allow null keys or values whereas HashMap allows one null key and any number of null values.
 To successfully store and retrieve objects from a HashTable, the objects used as keys must implement the hashCode
  method and the equals method. Since null is not an object, it can’t implement these methods.


What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model
Answer: Relational Database Management System (RDBMS) = Array (i.e. Array of structures)

        Network data is a database model conceived as a flexible way of representing objects and their relationships.
         = Graph

        A hierarchical data model was one of the earliest data models. This model was a file based model built like
        a tree. In this tree, a parent could be associated with multiple child nodes, but a child node could have
        only one parent. = Trees


How do HashMaps work in Java? How do they store values, and when are they useful?
Answer: A HashMap designates unique keys to corresponding values that can be retrieved at any given point.
In Java, HasMap works on hashing principles. It is a data structure which allows the storage of an object
 and retrieval in constant time O(1) provided that the key is known. In hashing, hash functions are used to
 link key and value in HashMap. Objects are stored by calling the put(key, value) method of HashMap and
 retrieved by calling get(key) method. When we call the put method, the hashcode() method of the key object
  is called so that the hash function of the map can find a bucket location to store a value object,
   which is actually an index of the internal array, known as the table. Using HashMap makes sense only
    when unique keys are available for the data being stored. It should be used when searching for items
     based on a key and when quick access time is an important requirement.


What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer: ArrayIndexOutOfBoundsException is a runtime unchecked exception. It occurs when accessing any array
 elements at an index which does not exist in the array itself. When the index is negative or larger than the
  size of the array then ArrayIndexOutOfBoundsException occurs.


What are the different ways of copying an array into another array?
Answer:

What is DFS and BFS?
Answer:

What is Recursion?
Answer: Recursion is a basic programming technique that can be used in Java,
 in which a method calls itself to solve some problem. A method that uses this technique is recursive.

What are linear and non-linear data Structures?
Answer: In linear data structure, elements are arranged in linear order where each element is attached to its
previous and next adjacent elements. Array, stack, queue, and linked list are some examples of linear data structure.
In non-linear data structure, data elements are attached in a hierarchical manner. Tree and graphs are some examples
 of linear data structure.


Outline different sorting algorithms and their time complexities:
Algorithm Name: Selection Sort
Time Complexity:
Best: Ω(n^2)
Average: θ(n^2)
Worst: O(n^2)

Algorithm Name: Bubble Sort
Time Complexity:
Best:Ω(n)
Average:θ(n^2)
Worst: O(n^2)

Algorithm Name: Insertion Sort
Time Complexity:
Best:Ω(n)
Average: θ(n^2)
Worst: O(n^2)

Algorithm Name: Heap Sort
Time Complexity:
Best:	Ω(n log(n))
Average: θ(n log(n))
Worst: O(n log(n))

Algorithm Name: Quick Sort
Time Complexity:
Best: Ω(n log(n))
Average: θ(n log(n))
Worst: O(n^2)

Algorithm Name: Merge Sort
Time Complexity:
Best: Ω(n log(n))
Average: θ(n log(n))
Worst:  O(n log(n))

Algorithm Name: Bucket Sort
Time Complexity:
Best: Ω(n+k)
Average: θ(n+k)
Worst: O(n^2)

Algorithm Name: Radix Sort
Time Complexity:
Best: Ω(nk)
Average: θ(nk)
Worst: O(nk)


Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a) In terms of Accessing elements:
  b) In terms of Inserting elements:
  c) In terms of Searching elements:
  d) In terms of Removing elements:

  Stack
    a) In terms of Accessing elements: - low time complexity.
    b) In terms of Inserting elements: - high time complexity because of last in, first out (LIFO).
    c) In terms of Searching elements: - low time complexity.
    d) In terms of Removing elements:- high time complexity because of last in, first out (LIFO).

  Array
    a) In terms of Accessing elements: - high time complexity
    b) In terms of Inserting elements: - low time complexity
    c) In terms of Searching elements: - low time complexity
    d) In terms of Removing elements:- low time complexity

  Queue
    a) In terms of Accessing elements: - low time complexity.
    b) In terms of Inserting elements: - high time complexity because of first in, first out (FIFO).
    c) In terms of Searching elements: - low time complexity.
    d) In terms of Removing elements:- high time complexity because of first in, first out (FIFO).

  LinkedList
    a) In terms of Accessing elements: - low time complexity.
    b) In terms of Inserting elements: - high time complexity.
